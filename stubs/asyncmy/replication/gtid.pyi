"""
This type stub file was generated by pyright.
"""

from io import BytesIO
from typing import Set, Union

class Gtid:
    @staticmethod
    def overlap(i1, i2): ...
    @staticmethod
    def contains(i1, i2): ...
    @staticmethod
    def parse_interval(interval):  # -> tuple[int, int]:
        """
        We parse a human-generated string here. So our end value b
        is incremented to conform to the internal representation format.
        """
        ...
    @staticmethod
    def parse(gtid: str):  # -> tuple[str | Any, list[tuple[int, int]]]:
        ...
    def __contains__(self, other):  # -> bool:
        ...
    def __init__(self, gtid: str, sid=..., intervals=...) -> None: ...
    def __add__(self, other):  # -> Gtid:
        """Include the transactions of this gtid. Raise if the
        attempted merge has different SID"""
        ...
    def __sub__(self, other):  # -> Gtid:
        """Remove intervals. Do not raise, if different SID simply
        ignore"""
        ...
    def __str__(self) -> str:
        """We represent the human value here - a single number
        for one transaction, or a closed interval (decrementing b)"""
        ...
    def __repr__(self):  # -> str:
        ...
    @property
    def encoded_length(self):  # -> int:
        ...
    def encode(self):  # -> bytes:
        ...
    @classmethod
    def decode(cls, payload: BytesIO):  # -> Self@Gtid:
        ...
    def __eq__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...

class GtidSet:
    def __init__(self, gtid_set: Set[Gtid]) -> None: ...
    def merge_gtid(self, gtid: Gtid):  # -> None:
        ...
    def __contains__(self, other: Union[Gtid, GtidSet]):  # -> bool:
        ...
    def __add__(self, other: Union[Gtid, GtidSet]):  # -> GtidSet:
        ...
    def __str__(self) -> str: ...
    def __repr__(self):  # -> str:
        ...
    @property
    def encoded_length(self):  # -> int:
        ...
    def encoded(self):  # -> bytes:
        ...
    encode = ...
    @classmethod
    def decode(cls, payload: BytesIO):  # -> Self@GtidSet:
        ...
    def __eq__(self, other: GtidSet) -> bool: ...
