"""
This type stub file was generated by pyright.
"""

from .events import BinLogEvent

class RowsEvent(BinLogEvent):
    def __init__(
        self, from_packet, event_size, table_map, ctl_connection, **kwargs
    ) -> None: ...
    @staticmethod
    def charset_to_encoding(name): ...
    @property
    def rows(self):  # -> list[Unknown] | None:
        ...

class DeleteRowsEvent(RowsEvent):
    """This event is trigger when a row in the database is removed

    For each row you have a hash with a single key: values which contain
    the data of the removed line.
    """

    def __init__(
        self, from_packet, event_size, table_map, ctl_connection, **kwargs
    ) -> None: ...

class WriteRowsEvent(RowsEvent):
    """This event is triggered when a row in database is added

    For each row you have a hash with a single key: values which contain the data of the new line.
    """

    def __init__(
        self, from_packet, event_size, table_map, ctl_connection, **kwargs
    ) -> None: ...

class UpdateRowsEvent(RowsEvent):
    """This event is triggered when a row in the database is changed

    For each row you got a hash with two keys:
        * before_values
        * after_values

    Depending of your MySQL configuration the hash can contains the full row or only the changes:
    http://dev.mysql.com/doc/refman/5.6/en/replication-options-binary-log.html#sysvar_binlog_row_image
    """

    def __init__(
        self, from_packet, event_size, table_map, ctl_connection, **kwargs
    ) -> None: ...

class TableMapEvent(BinLogEvent):
    """This event describes the structure of a table.
    It's sent before a change happens on a table.
    An end user of the lib should have no usage of this
    """

    def __init__(
        self, from_packet, event_size, table_map, connection, **kwargs
    ) -> None: ...
    @property
    def table(self):  # -> Table:
        ...
    async def init(self):  # -> None:
        ...
