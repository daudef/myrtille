"""
This type stub file was generated by pyright.
"""

from typing import List, Optional, Set, Type, Union
from asyncmy import Connection
from asyncmy.replication.events import BinLogEvent
from asyncmy.replication.gtid import Gtid

class ReportSlave:
    def __init__(self, value: Union[str, tuple, dict]) -> None: ...
    def encoded(self, server_id: int, master_id: int = ...):  # -> bytes:
        ...

class BinLogStream:
    def __init__(
        self,
        connection: Connection,
        ctl_connection: Connection,
        server_id: int,
        slave_uuid: Optional[str] = ...,
        slave_heartbeat: Optional[int] = ...,
        report_slave: Optional[Union[str, tuple, dict]] = ...,
        master_log_file: Optional[str] = ...,
        master_log_position: Optional[int] = ...,
        master_auto_position: Optional[Set[Gtid]] = ...,
        resume_stream: bool = ...,
        blocking: bool = ...,
        skip_to_timestamp: Optional[int] = ...,
        only_events: Optional[List[Type[BinLogEvent]]] = ...,
        ignored_events: Optional[List[Type[BinLogEvent]]] = ...,
        filter_non_implemented_events: bool = ...,
        only_tables: Optional[List[str]] = ...,
        ignored_tables: Optional[List[str]] = ...,
        only_schemas: Optional[List[str]] = ...,
        ignored_schemas: Optional[List[str]] = ...,
        freeze_schema: bool = ...,
    ) -> None: ...
    async def close(self):  # -> None:
        ...
    def __aiter__(self):  # -> Self@BinLogStream:
        ...
    async def __anext__(
        self,
    ):  # -> QueryEvent | RotateEvent | FormatDescriptionEvent | XidEvent | IntvarEvent | GtidEvent | StopEvent | BeginLoadQueryEvent | ExecuteLoadQueryEvent | HeartbeatLogEvent | UpdateRowsEvent | WriteRowsEvent | DeleteRowsEvent | TableMapEvent | NotImplementedEvent:
        ...
